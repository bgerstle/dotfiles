" execute pathogen#infect()
"
" runtime! plugin/sensible.vim

" Enable file type and indent detection
filetype plugin indent on

colorscheme tomorrow-night

" set encoding=utf-8
"
" Set shell for external commands
" set shell=zsh
" Make Vim more useful
" set nocompatible
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Allow cursor keys in insert mode
set esckeys
" Optimize for fast terminal connections
" set ttyfast
" Add the g flag to search/replace by default
" set gdefault
" Change mapleader
" let mapleader=","
" Don’t add empty newlines at the end of files
" set binary
" set noeol
" Centralize backups, swapfiles and undo history
" set backupdir=.
" set directory=.
" if exists("&undodir")
"   set undodir=~/.vim/undo
" endif
"
" Respect modeline in files
" set modeline
" Enable per-directory .vimrc files and disable unsafe commands in them
" set exrc
" set secure
" Enable line numbers
" set number
" Enable syntax highlighting
" syntax on
" Highlight current line
" set cursorline
" Set number of columns for indenting
set shiftwidth=2
" Replace tabs with spaces
set expandtab
" Make tabs as wide as two spaces
set tabstop=2
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
" set list
" Highlight searches
" set hlsearch
" Ignore case of searches
" set ignorecase
" Enable mouse in all modes
set mouse=a
" Disable error bells
" set noerrorbells
" Don’t reset cursor to start of line when moving around.
" set nostartofline
" Don’t show the intro message when starting Vim
" set shortmess=atI
" Show the current mode
" set showmode
" Show the filename in the window titlebar
" set title
" Use relative line numbers
" if exists("&relativenumber")
"   set relativenumber
"   au BufReadPost * set relativenumber
" endif
"
" Strip trailing whitespace (,ss)
" function! StripWhitespace()
"   let save_cursor = getpos(".")
"   let old_query = getreg('/')
"   :%s/\s\+$//e
"   call setpos('.', save_cursor)
"   call setreg('/', old_query)
" endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>
"
" Configure browser for haskell_doc.vim
" let g:haddock_browser = "open"
" let g:haddock_browser_callformat = "%s %s"
"
" Close vim if NERDTree is the only thing open
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" map <C-\> :NERDTreeToggle<CR>
"
" autocmd BufNewFile,BufRead *.json setfiletype=json syntax=javascript
" autocmd BufNewFile,BufRead Gruntfile set filetype=js syntax=javascript
" autocmd BufNewFile,BufRead *.podspec set filetype=ruby syntax=ruby
" autocmd BufNewFile,BufRead Podfile set filetype=ruby syntax=ruby
" use ghc functionality for haskell files
" au Bufenter *.hs compiler ghc
"
" Use local/dynamic vimtags
" set tags=./.vimtags;
" let g:easytags_dynamic_files = 2
"
" Airline config
" let g:airline_theme='tomorrow'
" let g:airline_powerline_fonts = 1
